{"version":3,"sources":["components/Button/button.module.scss","components/newToDoForm.module.scss","components/Footer/footer.module.scss","components/Todo-input/todoInput.module.scss","components/Todo/todo.module.scss","components/Todo-item/todoItem.module.scss","components/Header/Header.js","redux/actions/actionCreators.js","redux/actions/actionTodo.js","redux/actions/actionTypes.js","components/Todo-item/TodoItem.jsx","components/Todo-item/TodoItemContainer.js","components/Todo-item/index.js","components/Todo-list/Todo-list.js","components/Button/Button.js","components/Button/ButtonContainer.js","components/Footer/Footer.js","components/Todo-input/Todo-input.js","components/NewToDoForm.js","components/theme/light.js","components/theme/dark.js","components/theme/Container.js","components/DarkMode/DarkMode.js","components/common/regex.js","components/CompleteTodo/CompleteTodo.js","components/IncompleteTodo/IncompleteTodo.js","components/Todo/Todo.js","redux/actions/actionDarkMode.js","components/Todo/TodoContainer.js","App.js","redux/reducers/tasks.js","redux/reducers/filters.js","redux/reducers/config.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["module","exports","Header","className","createAction","type","payload","undefined","addTask","id","text","isCompleted","dispatch","getState","console","log","removeTodo","completeTodo","editTodo","removeAllCompleteTodos","removeAllTodos","length","changeFilter","activeFilter","TodoItem","useState","isEdit","setEdit","todoText","setTodoText","textInput","React","createRef","styles","todoItem","todoRow","icon","faCheckCircle","onClick","faCircle","completed","icons","faPencilAlt","editIcon","faTimes","deleteIcon","style","display","zIndex","position","left","onKeyDown","event","changedText","target","value","key","onChange","ref","current","defaultProps","connect","bindActionCreators","TodoItemContainer","TodoList","tasksList","map","Button","tasks","filter","task","button","Footer","amount","footer","StyledInput","styled","input","props","theme","colors","background","textColor","TodoInput","taskText","todoInput","placeholder","NewToDoForm","onSubmit","todoForm","todoButton","div","DarkMode","checked","darkMode","color","htmlFor","uppercaseNumber","RegExp","CompleteTodo","IncompleteTodo","Todo","filters","config","darkModeAction","setTaskText","todoError","setTodoError","JSON","parse","window","localStorage","getItem","setDarkMode","useEffect","variable","filterTasks","themeChange","setItem","isTasksExist","darkTheme","lightTheme","Container","backgroundImage","process","width","alt","src","preventDefault","match","validate","Date","getTime","reset","height","todoContainer","getActiveTasksCounter","state","App","Component","TASKS","load","namespace","action","el","initialState","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","save","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.609fd022.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"button_button__rhxVg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoForm\":\"newToDoForm_todoForm__3YO9D\",\"todoButton\":\"newToDoForm_todoButton__1CA9p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"footer_footer__11BbJ\",\"amount\":\"footer_amount__z1_u7\",\"btnGroup\":\"footer_btnGroup__wIas7\",\"active\":\"footer_active__23Zpe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoInput\":\"todoInput_todoInput__1HmQf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoContainer\":\"todo_todoContainer__3wrFj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoItem\":\"todoItem_todoItem__1veAl\",\"text\":\"todoItem_text__1WUM7\",\"completed\":\"todoItem_completed__E34qe\",\"icons\":\"todoItem_icons__3a8Rz\",\"deleteIcon\":\"todoItem_deleteIcon__3XaRk\",\"editIcon\":\"todoItem_editIcon__1hQxl\",\"todoRow\":\"todoItem_todoRow__3yYJ8\"};","import React from 'react'\n// import styles from './header.module.scss'\n// import Container from \"../theme/Container\";\n\nconst Header = () => {\n\n    return(\n    <div className=\"todo-header\">\n        <div className=\"ui inverted vertical masthead center aligned segment todo-header\">\n            {/*<h1>{darkMode ? 'dark mode' : 'light mode'}</h1>*/}\n            {/*<button onClick={()=> setDarkMode(prevMode => !prevMode)}>toddle</button>*/}\n            {/*<button onClick={() => themeChange('dark')}>Dark Mode</button>*/}\n            {/*<button onClick={() => themeChange('light')}>Light Mode</button>*/}\n            {/*<div className=\"image\">*/}\n\n                <h1>Todo app</h1>\n            {/*</div>*/}\n        </div>\n    </div>\n    )\n}\n\nexport default Header","export default function createAction(type, payload = undefined) {\n    return {\n        type,\n        ...payload !== undefined && { payload }\n    }\n}","import {\n    ADD_TASK,\n    REMOVE_TODO,\n    COMPLETE_TODO,\n    CHANGE_FILTER,\n    EDIT_TODO,\n    SAVE_EDIT_TODO,\n    REMOVE_ALL_COMPLETE_TODOS, REMOVE_ALL_TODOS\n} from \"./actionTypes\";\nimport createAction from \"./actionCreators\";\n\nexport const addTask = (id, text, isCompleted) => {\n    return (dispatch, getState) => {\n        console.log('reduxThunk state', getState());\n        const payload = { id, text, isCompleted }\n        dispatch(createAction(ADD_TASK, payload))\n    }\n}\n\nexport const removeTodo = (id) => {\n    return (dispatch, getState) => {\n        const payload = { id }\n        dispatch(createAction(REMOVE_TODO, payload))\n    }\n}\n\nexport const completeTodo = (id) => {\n    return (dispatch, getState) => {\n        const payload = { id }\n        dispatch(createAction(COMPLETE_TODO, payload))\n    }\n}\n\nexport const editTodo = (id, text) => {\n    return (dispatch, getState) => {\n        const payload = { id, text }\n        dispatch(createAction(EDIT_TODO, payload))\n    }\n}\n\nexport const saveEditTodo = (id, text) => {\n    return (dispatch, getState) => {\n        const payload = { id, text }\n        dispatch(createAction(SAVE_EDIT_TODO, payload))\n    }\n}\n\nexport const removeAllCompleteTodos = (isCompleted) => {\n    return (dispatch, getState) => {\n        const payload = { isCompleted }\n        dispatch(createAction(REMOVE_ALL_COMPLETE_TODOS, payload))\n    }\n}\n\nexport const removeAllTodos = (length) => {\n    return (dispatch, getState) => {\n        // const payload = { length }\n        dispatch(createAction(REMOVE_ALL_TODOS))\n    }\n}\n\n\nexport const changeFilter = activeFilter => ({\n    type: CHANGE_FILTER,\n    activeFilter,\n})\n","export const ADD_TASK = 'ADD_TASK';\n\nexport const REMOVE_TODO = 'REMOVE_TODO';\nexport const REMOVE_ALL_TODOS = 'REMOVE_ALL_TODOS';\nexport const REMOVE_ALL_COMPLETE_TODOS = 'REMOVE_ALL_COMPLETE_TODOS';\n\nexport const COMPLETE_TODO = 'COMPLETE_TODO';\n\nexport const CHANGE_FILTER = 'CHANGE_FILTER';\n\nexport const EDIT_TODO = 'EDIT_TODO';\nexport const SAVE_EDIT_TODO = 'SAVE_EDIT_TODO';\n\nexport const DARK_MODE = 'DARK_MODE';\n","import React, { useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCheckCircle, faCircle, faTimes, faPencilAlt } from '@fortawesome/free-solid-svg-icons'\nimport './todoItem.module.scss';\nimport PropTypes from \"prop-types\";\nimport styles from './todoItem.module.scss'\n\nconst TodoItem = ({ text, isCompleted, id, editTodo, removeTodo, completeTodo, }) => {\n    const [isEdit, setEdit] = useState(false);\n    const [todoText, setTodoText] = useState(text);\n    let textInput = React.createRef();\n\n    const handleEditTodo = () => {\n        setEdit(true);\n    }\n\n    const handleKeypress = (event) => {\n        const changedText = event.target.value;\n        if (event.key === 'Enter') {\n            setEdit(false)\n            editTodo(id, changedText)\n        }\n    }\n\n    const handleEditingChange = (event) => {\n        const changedText = event.target.value;\n        setTodoText(changedText)\n    }\n\n    const handleEditingSave = () => {\n        setEdit(false)\n        editTodo(id, textInput.current.value)\n    }\n\n    const handleEditingUnSave = () => {\n        setEdit(false)\n    }\n\n    return (\n        <li className={styles.todoItem + ' ' + styles.todoRow}>\n\n            {isCompleted\n                ? <FontAwesomeIcon icon={faCheckCircle} onClick={() => completeTodo(id)}/>\n                : <FontAwesomeIcon icon={faCircle} onClick={() => completeTodo(id)}/>}\n\n            <span className={isCompleted ? (styles.text + ' ' + styles.completed) : styles.text}>{text} </span>\n\n            <div className={styles.icons}>\n                <FontAwesomeIcon icon={faPencilAlt} onClick={handleEditTodo} className={styles.editIcon}/>\n\n                <FontAwesomeIcon onClick={() => removeTodo(id)} icon={faTimes} className={styles.deleteIcon}/>\n            </div>\n            {isEdit ? <div style={{display: \"flex\",zIndex: 1,\n                position: 'absolute',\n                left: 0}}>\n                <input\n                    onKeyDown={handleKeypress}\n                    onChange={handleEditingChange}\n                    value={todoText}\n                    ref={textInput}\n                />\n                <button onClick={handleEditingSave}> save</button>\n                <button onClick={handleEditingUnSave}>cancel</button>\n            </div> : null}\n\n        </li>\n    );\n};\n\nTodoItem.propTypes = {\n    text: PropTypes.string,\n    isCompleted: PropTypes.bool,\n    removeTodo: PropTypes.func,\n    id: PropTypes.number,\n    completeTodo: PropTypes.func,\n    editTodo: PropTypes.func,\n}\n\nTodoItem.defaultProps = {\n    text: '',\n    isCompleted: false,\n    removeTodo: () => {\n    },\n    id: 0,\n    completeTodo: () => {\n    },\n    editTodo: () => {\n    }\n}\n\nexport default TodoItem;\n","import { bindActionCreators } from \"redux\";\nimport { completeTodo, removeTodo, editTodo } from \"../../redux/actions/actionTodo\";\nimport { connect } from \"react-redux\";\nimport TodoItem from \"./TodoItem\";\n\nfunction mapDispatchToProps(dispatch) {\n    return bindActionCreators({\n        removeTodo,\n        completeTodo,\n        editTodo\n    }, dispatch)\n}\n\nexport default connect(null, mapDispatchToProps)(TodoItem);","import TodoItem from './TodoItem';\nimport TodoItemContainer from \"./TodoItemContainer\";\n\nexport default TodoItemContainer\nexport { TodoItem }","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport TodoItem from \"../Todo-item/index\";\n\nconst TodoList = ({ tasksList }) => (\n    <div>\n        <h1>All Todos</h1>\n        <ul className=\"todo-list\">\n            {tasksList.map(({ id, text, isCompleted }) => (\n                <TodoItem\n                    id={id} key={id} text={text}\n                    isCompleted={isCompleted}\n                />\n            ))}\n        </ul>\n    </div>\n);\n\nTodoList.propTypes = {\n    tasksList: PropTypes.array,\n}\n\nTodoList.defaultProps = {\n    tasksList: [],\n}\n\nexport default TodoList;\n","import React from 'react';\nimport styles from './button.module.scss'\n\nconst Button = ({ removeAllCompleteTodos, removeAllTodos }) => {\n\n    const handleRemoveAllCompleteTodos = () => {\n        const getIsCompleted = tasks => tasks.filter(task => task.isCompleted === true);\n        removeAllCompleteTodos(getIsCompleted)\n    }\n\n    return (\n        <div>\n            <button onClick={handleRemoveAllCompleteTodos} className={styles.button}>Delete done tasks</button>\n            <button onClick={removeAllTodos} className={styles.button}>Delete all tasks</button>\n        </div>\n    );\n};\n\nexport default Button;\n","import { bindActionCreators } from \"redux\";\nimport {\n    removeAllCompleteTodos, removeAllTodos,\n} from \"../../redux/actions/actionTodo\";\nimport { connect } from \"react-redux\";\nimport Button from \"./Button\";\n\nfunction mapDispatchToProps(dispatch) {\n    return bindActionCreators({\n        removeAllCompleteTodos,\n        removeAllTodos\n    }, dispatch)\n}\n\nexport default connect(null, mapDispatchToProps)(Button);","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport styles from \"./footer.module.scss\"\nimport Button from \"../Button/ButtonContainer\";\n\nconst FILTERS_BTN = [\n    {\n        text: 'All',\n        id: 'all',\n    },\n    {\n        text: 'Active',\n        id: 'active',\n    },\n    {\n        text: 'Completed',\n        id: 'completed'\n    }\n];\n\nconst Footer = ({ amount, activeFilter, changeFilter }) => (\n    <div className={styles.footer}>\n\n        <Button/>\n\n        {/*<span className={styles.amount}>{`${amount} Tasks left`}</span>*/}\n        {/*<div className={styles.btnGroup}>*/}\n        {/*    {FILTERS_BTN.map(({ text, id }) => (*/}\n        {/*        <button onClick={() => {*/}\n        {/*            changeFilter(id)*/}\n        {/*        }}*/}\n        {/*                key={id}*/}\n        {/*                className={id === activeFilter ? styles.active : styles.filterBtn}*/}\n        {/*        >{text}</button>*/}\n        {/*    ))}*/}\n        {/*</div>*/}\n    </div>\n);\n\nFooter.propTypes = {\n    amount: PropTypes.number,\n    activeFilter: PropTypes.string,\n    changeFilter: PropTypes.func,\n}\nFooter.defaultProps = {\n    amount: 0,\n    activeFilter: 'all',\n    changeFilter: () => {\n    },\n}\n\nexport default Footer;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './todoInput.module.scss'\nimport styled from 'styled-components'\n\nconst StyledInput = styled.input`\n  background: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.textColor};\n\n  ::placeholder {\n    background: ${props => props.theme.colors.background};\n    color: ${props => props.theme.colors.textColor};\n  }\n`\n\nconst TodoInput = ({ taskText, onChange }) => (\n    <div className=\"todo-input-wrapper\">\n        <i className=\"fas fa-plus\"/>\n        <StyledInput\n            className={styles.todoInput}\n            placeholder=\"Enter new task...\"\n            onChange={onChange}\n            value={taskText}\n\n        />\n\n    </div>\n);\n\nTodoInput.propTypes = {\n    onChange: PropTypes.func,\n    value: PropTypes.string,\n}\n\nTodoInput.defaultProps = {\n    onChange: () => {\n    },\n    value: '',\n}\n\nexport default TodoInput;","import React from 'react';\nimport TodoInput from \"./Todo-input/Todo-input\";\nimport styles from \"./newToDoForm.module.scss\"\n\nexport const NewToDoForm = ({ onChange, taskText,onSubmit, }) => {\n\n    return (\n        <div>\n            <form className={styles.todoForm} onSubmit={onSubmit}>\n\n                <label className=\"field\">\n                    <TodoInput type=\"text\" onChange={onChange} value={taskText} />\n                </label>\n                <input type=\"submit\" value=\"Отправить\" className={styles.todoButton} />\n            </form>\n        </div>\n    );\n}\n","export default {\n    colors: {\n        background: \"white\",\n        textColor: \"black\",\n    }\n}","export default {\n    colors: {\n        background: \"black\",\n        textColor: \"white\",\n    }\n}","import styled from \"styled-components\";\n\nexport default styled.div`\n    background: ${props => props.theme.colors.background};\n     color: ${props => props.theme.colors.textColor};\n  //   min-height: 100vh;\n  // display: flex;\n  // flex-direction: column;\n  // align-items: center;\n  // justify-content: center;\n  // font-size: calc(10px + 2vmin);\n`","import React from 'react';\nimport \"./darkMode.scss\";\n\nconst DarkMode = ({ checked, darkMode, onChange }) => {\n\n    return (\n        <div className=\"toggle-container\">\n            <span style={{ color: darkMode ? \"grey\" : \"orange\" }} >☀︎</span>\n            <span className=\"toggle\">\n                <input checked={checked} onChange={onChange} id=\"checkbox\"\n                       className=\"checkbox\" type=\"checkbox\"/>\n                            <label htmlFor=\"checkbox\"/>\n            </span>\n            <span style={{ color: darkMode ? \"yellow\" : \"grey\" }} >☾</span>\n        </div>\n    );\n};\n\nexport default DarkMode;","\n\nexport const uppercaseNumber = new RegExp(/(\\b[A-Z0-9][A-Z0-9]+|\\b[A-Z0-9]\\b)/g);","import React from 'react'\nimport PropTypes from \"prop-types\";\nimport TodoItem from \"../Todo-item/TodoItemContainer\";\n\nconst CompleteTodo = ({ tasksList }) => {\n    return (\n        <div>\n            <h1>Completed Todos</h1>\n            <ul className=\"todo-list\">\n                {tasksList.map(({ id, text, isCompleted }) => (\n                    <TodoItem\n                        id={id} key={id} text={text} isCompleted={isCompleted}/>\n                ))}\n            </ul>\n        </div>\n    )\n}\n\nCompleteTodo.propTypes = {\n    tasksList: PropTypes.array,\n    removeTodo: PropTypes.func,\n    completeTodo: PropTypes.func,\n    editTodo: PropTypes.func,\n}\n\nCompleteTodo.defaultProps = {\n    tasksList: [],\n    removeTodo: () => {\n    },\n    completeTodo: () => {\n    },\n    editTodo: () => {\n    },\n}\n\nexport default CompleteTodo","import React from 'react';\nimport TodoItem from \"../Todo-item/TodoItemContainer\";\n\nconst IncompleteTodo=(props)=> {\n    const { tasksList } = props;\n    return (\n        <div>\n            <h1>Incomplete Todos</h1>\n            <ul className=\"todo-list\">\n                {tasksList.map(({ id, text, isCompleted }) => (\n                    <TodoItem id={id} key={id} text={text} isCompleted={isCompleted}/>\n                ))}\n            </ul>\n        </div>\n    )\n}\n\nexport default IncompleteTodo;","import React, { useEffect, useState } from 'react';\nimport TodoList from '../Todo-list/Todo-list';\nimport Footer from \"../Footer/Footer\";\nimport { NewToDoForm } from \"../NewToDoForm\";\nimport { ThemeProvider } from \"styled-components\";\nimport lightTheme from \"../theme/light\";\nimport darkTheme from \"../theme/dark\";\nimport Container from \"../theme/Container\";\nimport DarkMode from \"../DarkMode/DarkMode\";\nimport { uppercaseNumber } from \"../common/regex\";\nimport CompleteTodo from \"../CompleteTodo/CompleteTodo\";\nimport IncompleteTodo from \"../IncompleteTodo/IncompleteTodo\";\n\nimport styles from \"./todo.module.scss\"\n\nconst Todo = ({ tasks, filters, changeFilter, config, darkModeAction, addTask }) => {\n\n    const [taskText, setTaskText] = useState('');\n    const [todoError, setTodoError] = useState('');\n    const [darkMode, setDarkMode] = useState(JSON.parse(window.localStorage.getItem('darkMode')) || false);\n\n    useEffect(() => {\n        if (!config.darkMode.variable) {\n            darkModeAction(window.localStorage.getItem('theme'))\n        }\n    }, [config.darkMode.variable, darkModeAction])\n\n    const handleInputChange = (event) => {\n        setTaskText(event.target.value)\n    }\n\n    const validate = (event) => {\n        let todoError = ''\n\n        if (taskText.match(uppercaseNumber) || taskText.length <= 4) {\n            todoError = 'invalid todo'\n        }\n        if (todoError) {\n            setTodoError(todoError)\n            return false\n        }\n        return true\n    }\n\n    const handleAddTask = (event, key) => {\n        event.preventDefault();\n\n        if (validate()) {\n            setTodoError('')\n\n            if (taskText.length > 4 || key === 'Enter') {\n                addTask((new Date()).getTime(), taskText, false);\n                event.target.reset();\n            }\n        }\n    }\n\n    const filterTasks = (tasks, activeFilter) => {\n        switch (activeFilter) {\n            case 'completed':\n                return tasks.filter(task => task.isCompleted)\n\n            case 'incompleted':\n                return tasks.filter(task => !task.isCompleted)\n\n            default:\n                return tasks;\n        }\n    }\n\n    const getActiveTasksCounter = tasks => tasks.filter(task => !task.isCompleted).length;\n\n    const themeChange = (value) => {\n        window.localStorage.setItem('theme', value);\n        darkModeAction(value)\n    }\n\n    const toggleTheme = () => {\n        setDarkMode(!darkMode);\n        window.localStorage.setItem('darkMode', !darkMode);\n\n        if (!darkMode) {\n            themeChange('dark')  //dark mode on\n        } else {\n            themeChange('light') //dark mode off\n        }\n    }\n\n    const isTasksExist = tasks && tasks.length > 0;\n\n    return (\n        <ThemeProvider theme={config.darkMode.variable === \"dark\" ? darkTheme : lightTheme}>\n\n            <Container className=\"todo-app\" style={{\n                backgroundImage: `url(${process.env.PUBLIC_URL + '/img/wave.svg'})`\n            }}>\n\n                <DarkMode\n                    checked={JSON.parse(window.localStorage.getItem('darkMode'))}\n                    onChange={() => toggleTheme()}\n                    darkMode={darkMode}/>\n\n                <div>\n                    <p><img style={{ width: '70px' }} alt=\"React Logo\" src=\"/logo192.png\"/></p>\n                    <h1>Add new Todo</h1>\n                </div>\n\n                <div>\n                    <NewToDoForm onSubmit={handleAddTask} value={taskText} onChange={handleInputChange}/>\n                    <div style={{ height: '19px' }}>\n                        {todoError ? <div>{todoError}</div> : null}\n                    </div>\n                </div>\n\n                <div>\n                    {isTasksExist && (\n                        <div className={styles.todoContainer}>\n\n                            <TodoList tasksList={tasks}/>\n\n                            <CompleteTodo tasksList={filterTasks(tasks, 'completed')}\n                                          activeFilter={'completed'}/>\n\n                            <IncompleteTodo tasksList={filterTasks(tasks, 'incompleted')}\n                                            activeFilter={'incompleted'}/>\n                        </div>\n                    )}\n                </div>\n\n                {isTasksExist && <Footer\n                    amount={getActiveTasksCounter(tasks)}\n                    activeFilter={filters}\n                    changeFilter={changeFilter}/>}\n\n            </Container>\n\n        </ThemeProvider>\n    );\n}\n\nexport default Todo;","import { DARK_MODE } from \"./actionTypes\";\nimport createAction from \"./actionCreators\";\n\nexport const darkModeAction = (variable) => {\n    return (dispatch, getState) => {\n        // console.log('reduxThunk state', getState());\n        const payload = { variable}\n        dispatch(createAction(DARK_MODE, payload))\n    }\n}","import { bindActionCreators } from \"redux\";\nimport {\n    addTask,\n    changeFilter,\n\n} from \"../../redux/actions/actionTodo\";\nimport { connect } from \"react-redux\";\nimport { Todo } from \"./index\";\nimport { darkModeAction } from \"../../redux/actions/actionDarkMode\";\n\nfunction mapStateToProps(state) {\n    return {\n        tasks: state.tasks,\n        filters: state.filters,\n        config: state.config\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return bindActionCreators({\n        addTask,\n        changeFilter,\n        darkModeAction,\n\n    }, dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Todo);","import React from 'react';\nimport './App.css';\nimport Header from './components/Header/Header'\nimport Todo from \"./components/Todo/TodoContainer\";\n\nclass App extends React.Component {\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Header/>\n                <Todo/>\n\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import {\n    ADD_TASK,\n    COMPLETE_TODO,\n    REMOVE_TODO,\n    EDIT_TODO,\n    SAVE_EDIT_TODO,\n    REMOVE_ALL_COMPLETE_TODOS,\n    REMOVE_ALL_TODOS\n} from \"../actions/actionTypes\";\nimport { load } from 'redux-localstorage-simple';\n\nlet TASKS = load({ namespace: 'Todo-list' })\n\nif (!TASKS || !TASKS.tasks || !TASKS.tasks.length) {\n    TASKS = {\n        tasks: [],\n    }\n}\n\nconst tasks = (state = TASKS.tasks, action) => {\n    switch (action.type) {\n        case ADD_TASK:\n            return [\n                ...state, {\n                    ...action.payload\n                }\n            ]\n\n        case REMOVE_TODO:\n            return [...state].filter(task => task.id !== action.payload.id);\n\n        case REMOVE_ALL_TODOS:\n            return []\n\n        case REMOVE_ALL_COMPLETE_TODOS:\n            return [...state].filter(task => task.isCompleted !== true);\n\n        case COMPLETE_TODO:\n            return [...state].map(task => task.id === action.payload.id\n                ? { ...task, isCompleted: !task.isCompleted }\n                : task\n            );\n\n        case EDIT_TODO:\n            return [...state].map(el => {\n                return el.id === action.payload.id\n                    ? { ...el, ...action.payload }\n                    : el\n            });\n\n        case SAVE_EDIT_TODO:\n            return state\n\n        default:\n            return state\n    }\n}\nexport default tasks","import { CHANGE_FILTER } from \"../actions/actionTypes\";\n\n\nconst BASE_FILTER = 'all';\n\nconst filter = (state = BASE_FILTER, { type, activeFilter }) => {\n    switch (type) {\n        case CHANGE_FILTER:\n            return activeFilter;\n\n        default:\n            return state;\n    }\n}\n\nexport default filter;","import { DARK_MODE } from \"../actions/actionTypes\";\n\n// import { load } from 'redux-localstorage-simple';\n// let TASKS = load({ namespace: 'DarkMode' })\n// if (!TASKS || !TASKS.tasks || !TASKS.tasks.length) {\n//     TASKS = {\n//         tasks: [],\n//     }\n// }\n\nconst initialState = {\n    // config: null\n    darkMode: {}\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case DARK_MODE:\n            return { ...state, darkMode: action.payload }\n        default:\n            return state;\n    }\n}","import { combineReducers } from \"redux\";\nimport tasks from \"./tasks\";\nimport filters from \"./filters\";\nimport config from \"./config\";\n\nconst rootReducer = combineReducers({ tasks, filters, config })\n\nexport default rootReducer;","import {\n    createStore,\n    compose,\n    applyMiddleware\n} from 'redux'\nimport rootReducer from \"./reducers\";\n// Import the necessary methods for saving and loading\nimport { save } from \"redux-localstorage-simple\"\nimport thunk from \"redux-thunk\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n// const configureStore = preloadedState => (\nconst store = createStore(\n    rootReducer,\n    // preloadedState,\n    composeEnhancers(\n        applyMiddleware(\n            thunk,\n            save({ namespace: 'Todo-list' }))\n    ),\n)\n// )\n\n// const store = configureStore({})\nwindow.store = store;\n//window.store.getState()  call store in console\n\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from \"./redux/store\";\n\nReactDOM.render((\n    <Provider store={store}>\n        <App/>\n    </Provider>\n\n), document.getElementById('root'));\n\n"],"sourceRoot":""}